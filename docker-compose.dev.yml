services:
  traefik:
    ports:
      - "80:80"
      - "443:443"
    networks:
      development:
    volumes:
      # Mount the Docker socket as read-only so Traefik can listen to events
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./.infrastructure/conf/traefik/dev/traefik.yml:/traefik.yml:ro
      - ./.infrastructure/conf/traefik/dev/traefik-certs.yml:/traefik-certs.yml
      - ./.infrastructure/conf/traefik/dev/certificates/:/certificates

  php:
    build:
      context: ./.infrastructure/conf/php
      dockerfile: Dockerfile
      target: development
      args:
        USER_ID: ${SPIN_USER_ID}
        GROUP_ID: ${SPIN_GROUP_ID}
    volumes:
      - .:/var/www/html/
    networks:
      - development
    depends_on:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.laravel.rule=HostRegexp(`localhost`)"
      - "traefik.http.routers.laravel.entrypoints=web"
      - "traefik.http.services.laravel.loadbalancer.server.port=8080"
      - "traefik.http.services.laravel.loadbalancer.server.scheme=http"

  node:
    image: node:20
    command: "npm dev"
    volumes:
      - .:/usr/src/app/
    working_dir: /usr/src/app/
    networks:
      - development
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.node.rule=Host(`localhost`)"
      - "traefik.http.routers.node.entrypoints=websecure"
      - "traefik.http.routers.node.tls=true"
      - "traefik.http.services.node.loadbalancer.server.port=3000"
      - "traefik.http.services.node.loadbalancer.server.scheme=http"

  postgres:
    image: &pgsql_image postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - ./.infrastructure/postgres_data:/var/lib/postgresql/data
    networks:
      - development
    healthcheck:
      test: pg_isready -U ${DB_USERNAME} -d ${DB_DATABASE}
      interval: 3s
      timeout: 10s
      retries: 3

  test-postgres:
    image: *pgsql_image
    container_name: test-db-pgsql
    command: postgres -c 'max_connections=250' -c 'max_locks_per_transaction=128'
    restart: unless-stopped
    environment:
      POSTGRES_DB: test_squadhub
      POSTGRES_USER: test_squadhub
      POSTGRES_PASSWORD: test_password
    networks:
      - development
    healthcheck:
      test: pg_isready -U test_squadhub -d test_squadhub
      interval: 3s
      timeout: 10s
      retries: 3

  mailpit:
    image: axllent/mailpit
    networks:
      - development
    ports:
      - "8025:8025"

networks:
  development:
